//
//  HTMLKit.swift
//
//
//  Created by Evan Anderson on 9/14/24.
//

import HTMLKitUtilities

// MARK: Elements
@freestanding(expression)
public macro html(xmlns: String? = nil, _ innerHTML: [String]) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: A
@freestanding(expression)
public macro a(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    attributionsrc: [String]? = nil,
    download: HTMLElementAttribute.download? = nil,
    href: String? = nil,
    hreflang: String? = nil,
    ping: [String] = [],
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    rel: String? = nil,
    target: HTMLElementAttribute.target? = nil,
    type: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro abbr(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro address(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro area(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    alt: String? = nil,
    coords: [Int] = [],
    download: HTMLElementAttribute.download? = nil,
    href: String? = nil,
    ping: [String] = [],
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    rel: String? = nil,
    target: HTMLElementAttribute.formtarget? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro article(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro aside(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro audio(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    autoplay: Bool = false,
    controls: Bool = true,
    controlslist: HTMLElementAttribute.controlslist? = nil,
    crossorigin: HTMLElementAttribute.crossorigin? = nil,
    disableremoteplayback: Bool = false,
    loop: Bool = false,
    muted: Bool = false,
    preload: HTMLElementAttribute.preload? = nil,
    src: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: B
@freestanding(expression)
public macro b(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro base(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    href: String? = nil,
    target: HTMLElementAttribute.formtarget? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro bdi(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro bdo(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro blockquote(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    cite: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro body(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    onafterprint: String? = nil,
    onbeforeprint: String? = nil,
    onbeforeunload: String? = nil,
    onblur: String? = nil,
    onerror: String? = nil,
    onfocus: String? = nil,
    onhashchange: String? = nil,
    onlanguagechange: String? = nil,
    onload: String? = nil,
    onmessage: String? = nil,
    onoffline: String? = nil,
    ononline: String? = nil,
    onpopstate: String? = nil,
    onresize: String? = nil,
    onstorage: String? = nil,
    onunload: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro br(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro button(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    disabled: Bool = false,
    form: String? = nil,
    formaction: String? = nil,
    formenctype: HTMLElementAttribute.formenctype? = nil,
    formmethod: HTMLElementAttribute.formmethod? = nil,
    formnovalidate: Bool = false,
    formtarget: HTMLElementAttribute.formtarget? = nil,
    name: String? = nil,
    popovertarget: String? = nil,
    popovertargetaction: HTMLElementAttribute.popovertargetaction? = nil,
    type: HTMLElementAttribute.buttontype? = nil,
    value: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: C
@freestanding(expression)
public macro canvas(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    height: HTMLElementAttribute.CSSUnit? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro caption(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro cite(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro code(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro col(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    span: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro colgroup(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    span: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: D
@freestanding(expression)
public macro data(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    value: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro datalist(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro dd(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro del(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    cite: String? = nil,
    datetime: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro details(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    open: Bool = false,
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro dfn(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro dialog(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    open: Bool = false,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro div(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro dl(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro dt(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: E
@freestanding(expression)
public macro em(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro embed(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    height: HTMLElementAttribute.CSSUnit? = nil,
    src: String? = nil,
    type: String? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: F
@freestanding(expression)
public macro fencedframe(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    allow: String? = nil,
    height: Int? = nil,
    width: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro fieldset(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    disabled: Bool = false,
    form: String? = nil,
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro figcaption(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro figure(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro footer(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro form(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    acceptCharset: [String] = [],
    //autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autocomplete: [String] = [],
    name: String? = nil,
    rel: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: H
@freestanding(expression)
public macro h1(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro h2(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro h3(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro h4(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro h5(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro h6(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro head(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro header(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro hgroup(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro hr(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: I
@freestanding(expression)
public macro i(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro iframe(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    allow: String? = nil,
    browsingtopics: Bool = false,
    credentialless: Bool = false,
    csp: String? = nil,
    height: HTMLElementAttribute.CSSUnit? = nil,
    loading: HTMLElementAttribute.loading? = nil,
    name: String? = nil,
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    sandbox: [HTMLElementAttribute.sandbox] = [],
    src: String? = nil,
    srcdoc: String? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro img(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    alt: String? = nil,
    attributionsrc: [String]? = nil,
    crossorigin: HTMLElementAttribute.crossorigin? = nil,
    decoding: HTMLElementAttribute.decoding? = nil,
    elementtiming: String? = nil,
    fetchpriority: HTMLElementAttribute.fetchpriority? = nil,
    height: HTMLElementAttribute.CSSUnit? = nil,
    ismap: Bool = false,
    loading: HTMLElementAttribute.loading? = nil,
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    sizes: [String] = [],
    src: String? = nil,
    srcset: [String] = [],
    width: HTMLElementAttribute.CSSUnit? = nil,
    usemap: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro input(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    accept: [String] = [],
    alt: String? = nil,
    //autocomplete: [String] = [],
    capture: HTMLElementAttribute.capture? = nil,
    checked: Bool = false,
    dirname: HTMLElementAttribute.dirname? = nil,
    disabled: Bool = false,
    form: String? = nil,
    formaction: String? = nil,
    formenctype: HTMLElementAttribute.formenctype? = nil,
    formmethod: HTMLElementAttribute.formmethod? = nil,
    formnovalidate: Bool = false,
    formtarget: HTMLElementAttribute.formtarget? = nil,
    height: HTMLElementAttribute.CSSUnit? = nil,
    list: String? = nil,
    max: Int? = nil,
    maxlength: Int? = nil,
    min: Int? = nil,
    minlength: Int? = nil,
    multiple: Bool = false,
    name: String? = nil,
    pattern: String? = nil,
    placeholder: String? = nil,
    popovertarget: String? = nil,
    popovertargetaction: HTMLElementAttribute.popovertargetaction? = nil,
    readonly: Bool = false,
    required: Bool = false,
    size: String? = nil,
    src: String? = nil,
    step: Float? = nil,
    type: HTMLElementAttribute.inputmode? = nil,
    value: String? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro ins(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    cite: String? = nil,
    datetime: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: K
@freestanding(expression)
public macro kbd(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: L
@freestanding(expression)
public macro label(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    for: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro legend(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro li(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    value: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro link(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    as: HTMLElementAttribute.`as`? = nil,
    blocking: Set<HTMLElementAttribute.blocking> = [],
    crossorigin: HTMLElementAttribute.crossorigin? = nil,
    disabled: Bool = false,
    fetchpriority: HTMLElementAttribute.fetchpriority? = nil,
    href: String? = nil,
    hreflang: String? = nil,
    imagesizes: [String] = [],
    integrity: String? = nil,
    media: String? = nil,
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    rel: [String] = [],
    sizes: [String] = [],
    type: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: M
@freestanding(expression)
public macro main(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro map(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro mark(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro menu(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro meta(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    charset: String? = nil,
    content: String? = nil,
    httpEquiv: HTMLElementAttribute.httpequiv? = nil,
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro meter(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    value: Float? = nil,
    min: Float? = nil,
    max: Float? = nil,
    low: Float? = nil,
    high: Float? = nil,
    optimum: Float? = nil,
    form: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: N
@freestanding(expression)
public macro nav(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro noscript(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: O
@freestanding(expression)
public macro object(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    form: String? = nil,
    height: HTMLElementAttribute.CSSUnit? = nil,
    name: String? = nil,
    type: String? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro ol(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    reversed: Bool = false,
    start: Int? = nil,
    type: HTMLElementAttribute.numberingtype? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro optgroup(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    disabled: Bool = false,
    label: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro option(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    disabled: Bool = false,
    label: String? = nil,
    selected: Bool = false,
    value: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro output(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    for: [String] = [],
    form: String? = nil,
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: P
@freestanding(expression)
public macro p(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro picture(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro portal(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    src: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro pre(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro progress(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    max: Float? = nil,
    value: Float? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: Q
@freestanding(expression)
public macro q(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    cite: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: R
@freestanding(expression)
public macro rp(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro rt(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro ruby(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: S
@freestanding(expression)
public macro s(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro samp(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro script(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    async: Bool = false,
    attributionsrc: [String]? = nil,
    blocking: HTMLElementAttribute.blocking? = nil,
    crossorigin: HTMLElementAttribute.crossorigin? = nil,
    defer: Bool = false,
    fetchpriority: HTMLElementAttribute.fetchpriority? = nil,
    integrity: String? = nil,
    nomodule: Bool = false,
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    src: String? = nil,
    type: HTMLElementAttribute.scripttype? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro search(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro section(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro select(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    disabled: Bool = false,
    form: String? = nil,
    multiple: Bool = false,
    name: String? = nil,
    required: Bool = false,
    size: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro slot(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro small(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro source(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    type: String? = nil,
    src: String? = nil,
    srcset: [String] = [],
    sizes: [String] = [],
    media: String? = nil,
    height: Int? = nil,
    width: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro span(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro strong(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro style(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    blocking: HTMLElementAttribute.blocking? = nil,
    media: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro sub(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro summary(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro sup(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: T
@freestanding(expression)
public macro table(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro tbody(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro td(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    colspan: Int? = nil,
    headers: [String] = [],
    rowspan: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro template(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    shadowrootclonable: HTMLElementAttribute.shadowrootclonable? = nil,
    shadowrootdelegatesfocus: Bool = false,
    shadowrootmode: HTMLElementAttribute.shadowrootmode? = nil,
    shadowrootserializable: Bool = false,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro textarea(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    //autocomplete: HTMLElementAttribute.AutoComplete,
    autocorrect: String? = nil,
    cols: Int? = nil,
    dirname: HTMLElementAttribute.dirname? = nil,
    disabled: Bool = false,
    form: String? = nil,
    maxlength: Int? = nil,
    minlength: Int? = nil,
    name: String? = nil,
    placeholder: String? = nil,
    readonly: Bool = false,
    rows: Int? = nil,
    wrap: HTMLElementAttribute.wrap? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro tfoot(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro th(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    abbr: String? = nil,
    colspan: Int? = nil,
    headers: [String] = [],
    rowspan: Int? = nil,
    scope: HTMLElementAttribute.scope? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro thead(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro time(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    datetime: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro title(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro tr(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro track(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    default: Bool = true,
    kind: HTMLElementAttribute.kind? = nil,
    label: String? = nil,
    src: String? = nil,
    srclang: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: U
@freestanding(expression)
public macro u(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro ul(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: V
@freestanding(expression)
public macro `var`(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro video(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    autoplay: Bool = false,
    controls: Bool = true,
    controlslist: [HTMLElementAttribute.controlslist] = [],
    crossorigin: HTMLElementAttribute.crossorigin? = nil,
    disablepictureinpicture: Bool = false,
    disableremoteplayback: Bool = false,
    height: HTMLElementAttribute.CSSUnit? = nil,
    loop: Bool = false,
    muted: Bool = false,
    playsinline: Bool = true,
    poster: String? = nil,
    preload: HTMLElementAttribute.preload? = nil,
    src: String? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: W
@freestanding(expression)
public macro wbr(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")
