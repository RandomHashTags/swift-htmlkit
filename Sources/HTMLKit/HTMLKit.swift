//
//  HTMLKit.swift
//
//
//  Created by Evan Anderson on 9/14/24.
//

// MARK: Elements
@freestanding(expression)
public macro html(xmlns: String? = nil, _ innerHTML: [String]) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: A
@freestanding(expression)
public macro a(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    attributionsrc: [String]? = nil,
    download: HTMLElementAttribute.download? = nil,
    href: String? = nil,
    hreflang: String? = nil,
    ping: [String] = [],
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    rel: String? = nil,
    target: HTMLElementAttribute.target? = nil,
    type: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro abbr(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro address(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro area(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    alt: String? = nil,
    coords: [Int] = [],
    download: HTMLElementAttribute.download? = nil,
    href: String? = nil,
    ping: [String] = [],
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    rel: String? = nil,
    target: HTMLElementAttribute.formtarget? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro article(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro aside(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro audio(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    autoplay: Bool = false,
    controls: Bool = true,
    controlslist: HTMLElementAttribute.controlslist? = nil,
    crossorigin: HTMLElementAttribute.crossorigin? = nil,
    disableremoteplayback: Bool = false,
    loop: Bool = false,
    muted: Bool = false,
    preload: HTMLElementAttribute.preload? = nil,
    src: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: B
@freestanding(expression)
public macro b(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro base(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    href: String? = nil,
    target: HTMLElementAttribute.formtarget? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro bdi(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro bdo(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro blockquote(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    cite: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro body(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    onafterprint: String? = nil,
    onbeforeprint: String? = nil,
    onbeforeunload: String? = nil,
    onblur: String? = nil,
    onerror: String? = nil,
    onfocus: String? = nil,
    onhashchange: String? = nil,
    onlanguagechange: String? = nil,
    onload: String? = nil,
    onmessage: String? = nil,
    onoffline: String? = nil,
    ononline: String? = nil,
    onpopstate: String? = nil,
    onresize: String? = nil,
    onstorage: String? = nil,
    onunload: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro br(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro button(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    disabled: Bool = false,
    form: String? = nil,
    formaction: String? = nil,
    formenctype: HTMLElementAttribute.formenctype? = nil,
    formmethod: HTMLElementAttribute.formmethod? = nil,
    formnovalidate: Bool = false,
    formtarget: HTMLElementAttribute.formtarget? = nil,
    name: String? = nil,
    popovertarget: String? = nil,
    popovertargetaction: HTMLElementAttribute.popovertargetaction? = nil,
    type: HTMLElementAttribute.buttontype? = nil,
    value: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: C
@freestanding(expression)
public macro canvas(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    height: HTMLElementAttribute.CSSUnit? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro caption(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro cite(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro code(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro col(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    span: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro colgroup(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    span: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: D
@freestanding(expression)
public macro data(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    value: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro datalist(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro dd(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro del(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    cite: String? = nil,
    datetime: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro details(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    open: Bool = false,
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro dfn(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro dialog(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    open: Bool = false,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro div(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro dl(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro dt(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: E
@freestanding(expression)
public macro em(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro embed(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    height: HTMLElementAttribute.CSSUnit? = nil,
    src: String? = nil,
    type: String? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: F
@freestanding(expression)
public macro fencedframe(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    allow: String? = nil,
    height: Int? = nil,
    width: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro fieldset(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    disabled: Bool = false,
    form: String? = nil,
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro figcaption(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro figure(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro footer(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro form(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    acceptCharset: [String] = [],
    //autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autocomplete: [String] = [],
    name: String? = nil,
    rel: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: H
@freestanding(expression)
public macro h1(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro h2(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro h3(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro h4(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro h5(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro h6(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro head(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro header(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro hgroup(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro hr(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: I
@freestanding(expression)
public macro i(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro iframe(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    allow: String? = nil,
    browsingtopics: Bool = false,
    credentialless: Bool = false,
    csp: String? = nil,
    height: HTMLElementAttribute.CSSUnit? = nil,
    loading: HTMLElementAttribute.loading? = nil,
    name: String? = nil,
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    sandbox: [HTMLElementAttribute.sandbox] = [],
    src: String? = nil,
    srcdoc: String? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro img(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    alt: String? = nil,
    attributionsrc: [String]? = nil,
    crossorigin: HTMLElementAttribute.crossorigin? = nil,
    decoding: HTMLElementAttribute.decoding? = nil,
    elementtiming: String? = nil,
    fetchpriority: HTMLElementAttribute.fetchpriority? = nil,
    height: HTMLElementAttribute.CSSUnit? = nil,
    ismap: Bool = false,
    loading: HTMLElementAttribute.loading? = nil,
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    sizes: [String] = [],
    src: String? = nil,
    srcset: [String] = [],
    width: HTMLElementAttribute.CSSUnit? = nil,
    usemap: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro input(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    accept: [String] = [],
    alt: String? = nil,
    //autocomplete: [String] = [],
    capture: HTMLElementAttribute.capture? = nil,
    checked: Bool = false,
    dirname: HTMLElementAttribute.dirname? = nil,
    disabled: Bool = false,
    form: String? = nil,
    formaction: String? = nil,
    formenctype: HTMLElementAttribute.formenctype? = nil,
    formmethod: HTMLElementAttribute.formmethod? = nil,
    formnovalidate: Bool = false,
    formtarget: HTMLElementAttribute.formtarget? = nil,
    height: HTMLElementAttribute.CSSUnit? = nil,
    list: String? = nil,
    max: Int? = nil,
    maxlength: Int? = nil,
    min: Int? = nil,
    minlength: Int? = nil,
    multiple: Bool = false,
    name: String? = nil,
    pattern: String? = nil,
    placeholder: String? = nil,
    popovertarget: String? = nil,
    popovertargetaction: HTMLElementAttribute.popovertargetaction? = nil,
    readonly: Bool = false,
    required: Bool = false,
    size: String? = nil,
    src: String? = nil,
    step: Float? = nil,
    type: HTMLElementAttribute.inputmode? = nil,
    value: String? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro ins(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    cite: String? = nil,
    datetime: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: K
@freestanding(expression)
public macro kbd(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: L
@freestanding(expression)
public macro label(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    for: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro legend(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro li(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    value: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro link(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    as: HTMLElementAttribute.`as`? = nil,
    blocking: Set<HTMLElementAttribute.blocking> = [],
    crossorigin: HTMLElementAttribute.crossorigin? = nil,
    disabled: Bool = false,
    fetchpriority: HTMLElementAttribute.fetchpriority? = nil,
    href: String? = nil,
    hreflang: String? = nil,
    imagesizes: [String] = [],
    integrity: String? = nil,
    media: String? = nil,
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    rel: [String] = [],
    sizes: [String] = [],
    type: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: M
@freestanding(expression)
public macro main(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro map(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro mark(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro menu(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro meta(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    charset: String? = nil,
    content: String? = nil,
    httpEquiv: HTMLElementAttribute.httpequiv? = nil,
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro meter(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    value: Float? = nil,
    min: Float? = nil,
    max: Float? = nil,
    low: Float? = nil,
    high: Float? = nil,
    optimum: Float? = nil,
    form: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: N
@freestanding(expression)
public macro nav(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro noscript(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: O
@freestanding(expression)
public macro object(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    form: String? = nil,
    height: HTMLElementAttribute.CSSUnit? = nil,
    name: String? = nil,
    type: String? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro ol(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    reversed: Bool = false,
    start: Int? = nil,
    type: HTMLElementAttribute.numberingtype? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro optgroup(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    disabled: Bool = false,
    label: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro option(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    disabled: Bool = false,
    label: String? = nil,
    selected: Bool = false,
    value: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro output(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    for: [String] = [],
    form: String? = nil,
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: P
@freestanding(expression)
public macro p(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro picture(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro portal(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    src: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro pre(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro progress(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    max: Float? = nil,
    value: Float? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: Q
@freestanding(expression)
public macro q(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    cite: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: R
@freestanding(expression)
public macro rp(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro rt(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro ruby(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: S
@freestanding(expression)
public macro s(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro samp(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro script(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    async: Bool = false,
    attributionsrc: [String]? = nil,
    blocking: HTMLElementAttribute.blocking? = nil,
    crossorigin: HTMLElementAttribute.crossorigin? = nil,
    defer: Bool = false,
    fetchpriority: HTMLElementAttribute.fetchpriority? = nil,
    integrity: String? = nil,
    nomodule: Bool = false,
    referrerpolicy: HTMLElementAttribute.referrerpolicy? = nil,
    src: String? = nil,
    type: HTMLElementAttribute.scripttype? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro search(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro section(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro select(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    disabled: Bool = false,
    form: String? = nil,
    multiple: Bool = false,
    name: String? = nil,
    required: Bool = false,
    size: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro slot(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    name: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro small(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro source(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    type: String? = nil,
    src: String? = nil,
    srcset: [String] = [],
    sizes: [String] = [],
    media: String? = nil,
    height: Int? = nil,
    width: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro span(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro strong(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro style(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    blocking: HTMLElementAttribute.blocking? = nil,
    media: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro sub(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro summary(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro sup(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: T
@freestanding(expression)
public macro table(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro tbody(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro td(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    colspan: Int? = nil,
    headers: [String] = [],
    rowspan: Int? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro template(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    shadowrootclonable: HTMLElementAttribute.shadowrootclonable? = nil,
    shadowrootdelegatesfocus: Bool = false,
    shadowrootmode: HTMLElementAttribute.shadowrootmode? = nil,
    shadowrootserializable: Bool = false,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro textarea(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    //autocomplete: HTMLElementAttribute.AutoComplete,
    autocorrect: String? = nil,
    cols: Int? = nil,
    dirname: HTMLElementAttribute.dirname? = nil,
    disabled: Bool = false,
    form: String? = nil,
    maxlength: Int? = nil,
    minlength: Int? = nil,
    name: String? = nil,
    placeholder: String? = nil,
    readonly: Bool = false,
    rows: Int? = nil,
    wrap: HTMLElementAttribute.wrap? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro tfoot(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro th(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    abbr: String? = nil,
    colspan: Int? = nil,
    headers: [String] = [],
    rowspan: Int? = nil,
    scope: HTMLElementAttribute.scope? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro thead(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro time(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    datetime: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro title(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro tr(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro track(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    default: Bool = true,
    kind: HTMLElementAttribute.kind? = nil,
    label: String? = nil,
    src: String? = nil,
    srclang: String? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: U
@freestanding(expression)
public macro u(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro ul(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: V
@freestanding(expression)
public macro `var`(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

@freestanding(expression)
public macro video(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    
    autoplay: Bool = false,
    controls: Bool = true,
    controlslist: [HTMLElementAttribute.controlslist] = [],
    crossorigin: HTMLElementAttribute.crossorigin? = nil,
    disablepictureinpicture: Bool = false,
    disableremoteplayback: Bool = false,
    height: HTMLElementAttribute.CSSUnit? = nil,
    loop: Bool = false,
    muted: Bool = false,
    playsinline: Bool = true,
    poster: String? = nil,
    preload: HTMLElementAttribute.preload? = nil,
    src: String? = nil,
    width: HTMLElementAttribute.CSSUnit? = nil,
    _ innerHTML: [String] = []
) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: W
@freestanding(expression)
public macro wbr(
    accesskey: String? = nil,
    autocapitalize: HTMLElementAttribute.autocapitalize? = nil,
    autofocus: Bool = false,
    class: [String] = [],
    contenteditable: HTMLElementAttribute.contenteditable? = nil,
    data: (id: String, value: String)? = nil,
    dir: HTMLElementAttribute.dir? = nil,
    draggable: HTMLElementAttribute.draggable? = nil,
    enterkeyhint: HTMLElementAttribute.enterkeyhint? = nil,
    exportparts: [String] = [],
    hidden: HTMLElementAttribute.hidden? = nil,
    id: String? = nil,
    inert: Bool = false,
    inputmode: HTMLElementAttribute.inputmode? = nil,
    is: String? = nil,
    itemid: String? = nil,
    itemprop: String? = nil,
    itemref: String? = nil,
    itemscope: Bool = false,
    itemtype: String? = nil,
    lang: String? = nil,
    nonce: String? = nil,
    part: [String] = [],
    popover: HTMLElementAttribute.popover? = nil,
    role: String? = nil,
    slot: String? = nil,
    spellcheck: HTMLElementAttribute.spellcheck? = nil,
    style: String? = nil,
    tabindex: Int? = nil,
    title: String? = nil,
    translate: HTMLElementAttribute.translate? = nil,
    virtualkeyboardpolicy: HTMLElementAttribute.virtualkeyboardpolicy? = nil,
    writingsuggestions: HTMLElementAttribute.writingsuggestions? = nil,
    _ innerHTML: [String] = []) -> String = #externalMacro(module: "HTMLKitMacros", type: "HTMLElement")

// MARK: HTMLElementAttribute
public enum HTMLElementAttribute {
}

// MARK: CSSUnit
public extension HTMLElementAttribute {
    struct CSSUnit : CustomStringConvertible {
        let string:String
        init(_ string: String) {
            self.string = string
        }
        public var description : String { string }
    }
}
public extension HTMLElementAttribute.CSSUnit { // https://www.w3schools.com/cssref/css_units.php
    // absolute
    static func centimeters(_ value: Float) -> Self { Self("\(value)cm") }
    static func millimeters(_ value: Float) -> Self { Self("\(value)mm") }
    /// 1 inch = 96px = 2.54cm
    static func inches(_ value: Float) -> Self      { Self("\(value)in") }
    /// 1 pixel = 1/96th of 1inch
    static func pixels(_ value: Float) -> Self      { Self("\(value)px") }
    /// 1 point = 1/72 of 1inch
    static func points(_ value: Float) -> Self      { Self("\(value)pt") }
    /// 1 pica = 12 points
    static func picas(_ value: Float) -> Self       { Self("\(value)pc") }
    
    // relative
    /// Relative to the font-size of the element (2em means 2 times the size of the current font)
    static func em(_ value: Float) -> Self             { Self("\(value)em") }
    /// Relative to the x-height of the current font (rarely used)
    static func ex(_ value: Float) -> Self             { Self("\(value)ex") }
    /// Relative to the width of the "0" (zero)
    static func ch(_ value: Float) -> Self             { Self("\(value)ch") }
    /// Relative to font-size of the root element
    static func rem(_ value: Float) -> Self            { Self("\(value)rem") }
    /// Relative to 1% of the width of the viewport
    static func viewportWidth(_ value: Float) -> Self  { Self("\(value)vw") }
    /// Relative to 1% of the height of the viewport
    static func viewportHeight(_ value: Float) -> Self { Self("\(value)vh") }
    /// Relative to 1% of viewport's smaller dimension
    static func viewportMin(_ value: Float) -> Self    { Self("\(value)vmin") }
    /// Relative to 1% of viewport's larger dimension
    static func viewportMax(_ value: Float) -> Self    { Self("\(value)vmax") }
    /// Relative to the parent element
    static func percent(_ value: Float) -> Self        { Self("\(value)%") }
}

public extension HTMLElementAttribute {
    typealias height = CSSUnit
    typealias width = CSSUnit

    enum `as` : String {
        case audio, document, embed, fetch, font, image, object, script, style, track, video, worker
    }

    enum autocapitalize : String {
        case on, off
        case none
        case sentences, words, characters
    }

    /*enum AutoComplete { // TODO: support
        package enum Value : String {
            case off, on, tokenList([String])

            var rawValue: RawValue {
                return ""
            }
        }
    }*/

    enum blocking : String {
        case render
    }

    enum buttontype : String {
        case submit, reset, button
    }

    enum capture : String {
        case user, environment
    }

    enum contenteditable : String {
        case `true`, `false`
        case plaintextOnly = "plaintext-only"
    }

    enum controlslist : String {
        case nodownload, nofullscreen, noremoteplayback
    }

    enum crossorigin : String {
        case anonymous
        case useCredentials = "use-credentials"
    }

    enum decoding : String {
        case sync, async, auto
    }

    enum dir : String {
        case auto, ltr, rtl
    }

    enum dirname : String {
        case ltr, rtl
    }

    enum draggable : String {
        case `true`, `false`
    }

    enum download : String {
        case browserSuggested = ""
        case filename
    }

    enum enterkeyhint : String {
        case enter, done, go, next, previous, search, send
    }

    enum fetchpriority : String {
        case high, low, auto
    }

    enum formenctype : String {
        case applicationXWWWFormURLEncoded = "application/x-www-form-urlencoded"
        case multipartFormData = "multipart/form-data"
        case textPlain = "text/plain"
    }

    enum formmethod : String {
        case get, post, dialog
    }

    enum formtarget : String {
        case _self, _blank, _parent, _top
    }

    enum hidden : String {
        case `true` = ""
        case hidden
        case untilFound = "until-found"
    }

    enum httpequiv : String {
        case contentSecurityPolicy = "content-security-policy"
        case contentType = "content-type"
        case defaultStyle = "default-style"
        case xUACompatible = "x-ua-compatible"
        case refresh
    }

    enum inputmode {
        case none, text, decimal, numeric, tel, search, email, url
    }

    enum loading : String {
        case eager, lazy
    }

    enum numberingtype : String {
        case a, A, i, I, one = "1"
    }

    enum popover : String {
        case auto, manual
    }
    enum popovertargetaction : String {
        case hide, show, toggle
    }

    enum preload : String {
        case none, metadata, auto
    }

    enum referrerpolicy : String {
        case noReferrer = "no-referrer"
        case noReferrerWhenDowngrade = "no-referrer-when-downgrade"
        case origin
        case originWhenCrossOrigin = "origin-when-cross-origin"
        case sameOrigin
        case strictOrigin = "strict-origin"
        case strictOriginWhenCrossOrigin = "strict-origin-when-cross-origin"
        case unsafeURL = "unsafe-url"
    }

    enum Role { // TODO: support
        public enum Value : String {
            case alert
            case alertdialog
            case application
            case article

            case banner
            case button

            case cell
            case checkbox
            case columnheader
            case combobox
            case command
            case comment
            case complementary
            case composite
            case contentinfo

            case definition
            case dialog
            case directory
            //case document(Document)

            case feed
            case figure
            case form

            case generic
            case grid
            case gridcell
            case group

            case heading

            case img
            case input

            case landmark
            case link
            case list
            case listbox
            case listitem
            case log

            case main
            case mark
            case marquee
            case math
            case menu
            case menubar
            case menuitem
            case menuitemcheckbox
            case menuitemradio
            case meter

            case navigation
            case none
            case note

            case option
            
            case presentation
            case progressbar

            case radio
            case radiogroup
            case range
            case region
            case roletype
            case row
            case rowgroup
            case rowheader

            case scrollbar
            case search
            case searchbox
            case section
            case sectionhead
            case select
            case separator
            case slider
            case spinbutton
            case status
            case structure
            case suggestion
            case `switch`

            case tab
            case table
            case tablist
            case tabpanel
            case term
            case textbox
            case timer
            case toolbar
            case tooltip
            case tree
            case treegrid
            case treeitem

            case widget
            case window

            /*package var rawValue : RawValue {
                switch self {
                    case .document(let bro):
                        return bro.rawValue
                    default:
                        return "\(self)"
                }
            }*/

            public enum Document : String {
                case associationlist
                case associationlistitemkey
                case associationlistitemvalue
                case blockquote
                case caption
                case code
                case deletion
                case emphasis
                case figure
                case heading
                case img
                case insertion
                case list
                case listitem
                case mark
                case meter
                case paragraph
                case strong
                case `subscript`
                case superscript
                case term
                case time
            }
        }
    }

    enum sandbox : String {
        case allowDownloads = "allow-downloads"
        case allowForms = "allow-forms"
        case allowModals = "allow-modals"
        case allowOrientationLock = "allow-orientation-lock"
        case allowPointerLock = "allow-pointer-lock"
        case allowPopups = "allow-popups"
        case allowPopupsToEscapeSandbox = "allow-popups-to-escape-sandbox"
        case allowPresentation = "allow-presentation"
        case allowSameOrigin = "allow-same-origin"
        case allowScripts = "allow-scripts"
        case allowStorageAccessByUserActiviation = "allow-storage-access-by-user-activation"
        case allowTopNavigation = "allow-top-navigation"
        case allowTopNavigationByUserActivation = "allow-top-navigation-by-user-activation"
        case allowTopNavigationToCustomProtocols = "allow-top-navigation-to-custom-protocols"
    }

    enum scripttype : String {
        case classic = ""
        case importmap, module, speculationrules
    }

    enum scope : String {
        case row, col, rowgroup, colgroup
    }

    enum shadowrootmode : String {
        case open, closed
    }
    enum shadowrootclonable : String {
        case `true`, `false`
    }

    enum shape : String {
        case rect, circle, poly, `default`
    }

    enum spellcheck : String {
        case `true`, `false`
    }

    enum target : String {
        case _self, _blank, _parent, _top, _unfencedTop
    }

    enum kind : String {
        case subtitles, captions, chapters, metadata
    }

    enum translate : String {
        case yes, no
    }

    enum virtualkeyboardpolicy : String {
        case auto, manual
    }

    enum wrap : String {
        case hard, soft
    }

    enum writingsuggestions : String {
        case `true`, `false`
    }
}
